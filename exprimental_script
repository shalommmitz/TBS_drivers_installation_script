#!/usr/bin/env python3

import os
import subprocess
import shutil
from pathlib import Path

FIRMWARE_URL = "http://www.tbsdtv.com/download/document/linux/tbs-tuner-firmwares_v1.0.tar.bz2"
FIRMWARE_FILE = "tbs-tuner-firmwares_v1.0.tar.bz2"
FIRMWARE_DIR = "/lib/firmware/"

MEDIA_BUILD_DIR = Path("media_build")
MEDIA_DIR = Path("media")

def run(cmd, cwd=None, check=True):
    print(f">>> {cmd}")
    subprocess.run(cmd, shell=True, cwd=cwd, check=check)

def file_same_size(remote_url, local_file):
    try:
        update_size = subprocess.check_output(
            f"wget {remote_url} --spider --server-response -O - 2>&1 | "
            "sed -ne '/Content-Length/{{s/.*: //;p}}'", shell=True).decode().strip()
        current_size = str(os.path.getsize(local_file))
        return update_size == current_size
    except:
        return False

def install_packages():
    pkgs = [
        "linux-headers-$(uname -r)",
        "build-essential",
        "patchutils",
        "libproc-processtable-perl",
        "dvb-apps",
        "gcc-12",
        "dwarves"
    ]
    run("sudo apt --yes install " + " ".join(pkgs))

def fetch_firmware():
    if not Path(FIRMWARE_FILE).exists() or not file_same_size(FIRMWARE_URL, FIRMWARE_FILE):
        Path(FIRMWARE_FILE).unlink(missing_ok=True)
        run(f"wget {FIRMWARE_URL}")
    run(f"sudo tar jxvf {FIRMWARE_FILE} -C {FIRMWARE_DIR}")

def prepare_sources():
    # If media_build was changed or removed, reclone
    if MEDIA_BUILD_DIR.exists():
        print("Existing media_build found. Keeping for speed.")
    else:
        run("git clone https://github.com/tbsdtv/media_build.git")

    if MEDIA_DIR.exists():
        print("Existing media folder found. Keeping for speed.")
    else:
        run("git clone --depth=1 https://github.com/tbsdtv/linux_media.git -b latest ./media")

def patch_ccs_for_kernel_6_8():
    path = MEDIA_BUILD_DIR / "v4l/ccs-core.c"
    if path.exists():
        contents = path.read_text()
        if "pm_runtime_get_if_active(&client->dev, true)" in contents:
            patched = contents.replace(
                "pm_runtime_get_if_active(&client->dev, true)",
                "pm_runtime_get_if_active(&client->dev)"
            )
            path.write_text(patched)
            print("✅ Patched ccs-core.c for pm_runtime_get_if_active")

def build_and_install():
    run("make dir DIR=../media", cwd="media_build")
    
    # Custom .config instead of allyesconfig
    config = MEDIA_BUILD_DIR / "v4l/.config"
    if not config.exists():
        run("make menuconfig", cwd="media_build/v4l")  # let user manually select saa716x_tbs-dvb only
    else:
        print("Using existing .config")

    patch_ccs_for_kernel_6_8()

    run("make -j$(nproc)", cwd="media_build")
    run("sudo make install", cwd="media_build")

    run("sudo depmod -a")
    result = subprocess.getoutput("sudo modprobe saa716x_tbs-dvb")
    if "FATAL" in result:
        print("❌ ERROR: modprobe failed:", result)
        exit(1)

def finalize():
    run("echo saa716x_tbs-dvb | sudo tee /etc/modules-load.d/tbs.conf")
    run("sudo lsdvb")
    print("✅ TBS driver installed. You may now use your DVB tuner.")

if __name__ == "__main__":
    install_packages()
    fetch_firmware()
    prepare_sources()
    build_and_install()
    finalize()
